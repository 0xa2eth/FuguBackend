///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package user

import (
	"fmt"
	"time"

	"FuguBackend/app/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *User {
	return new(User)
}

func NewQueryBuilder() *userQueryBuilder {
	return new(userQueryBuilder)
}

func (t *User) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type userQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *userQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *userQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&User{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *userQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&User{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *userQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&User{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *userQueryBuilder) First(db *gorm.DB) (*User, error) {
	ret := &User{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *userQueryBuilder) QueryOne(db *gorm.DB) (*User, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *userQueryBuilder) QueryAll(db *gorm.DB) ([]*User, error) {
	var ret []*User
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *userQueryBuilder) Limit(limit int) *userQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *userQueryBuilder) Offset(offset int) *userQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *userQueryBuilder) WhereId(p mysql.Predicate, value int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereIdIn(value []int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereIdNotIn(value []int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderById(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *userQueryBuilder) WhereNftnum(p mysql.Predicate, value int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nftnum", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereNftnumIn(value []int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nftnum", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereNftnumNotIn(value []int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nftnum", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByNftnum(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "nftnum "+order)
	return qb
}

func (qb *userQueryBuilder) WhereFtnum(p mysql.Predicate, value int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "ftnum", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereFtnumIn(value []int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "ftnum", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereFtnumNotIn(value []int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "ftnum", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByFtnum(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "ftnum "+order)
	return qb
}

func (qb *userQueryBuilder) WhereTicketnum(p mysql.Predicate, value int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "ticketnum", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereTicketnumIn(value []int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "ticketnum", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereTicketnumNotIn(value []int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "ticketnum", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByTicketnum(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "ticketnum "+order)
	return qb
}

func (qb *userQueryBuilder) WhereNickname(p mysql.Predicate, value string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nickname", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereNicknameIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nickname", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereNicknameNotIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nickname", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByNickname(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "nickname "+order)
	return qb
}

func (qb *userQueryBuilder) WhereBios(p mysql.Predicate, value string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "bios", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereBiosIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "bios", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereBiosNotIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "bios", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByBios(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "bios "+order)
	return qb
}

func (qb *userQueryBuilder) WhereAvatar(p mysql.Predicate, value string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "avatar", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereAvatarIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "avatar", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereAvatarNotIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "avatar", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByAvatar(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "avatar "+order)
	return qb
}

func (qb *userQueryBuilder) WhereAddress(p mysql.Predicate, value string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "address", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereAddressIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "address", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereAddressNotIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "address", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByAddress(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "address "+order)
	return qb
}

func (qb *userQueryBuilder) WhereTwitterid(p mysql.Predicate, value int64) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "twitterid", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereTwitteridIn(value []int64) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "twitterid", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereTwitteridNotIn(value []int64) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "twitterid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByTwitterid(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "twitterid "+order)
	return qb
}

func (qb *userQueryBuilder) WhereTwitteravatar(p mysql.Predicate, value string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "twitteravatar", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereTwitteravatarIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "twitteravatar", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereTwitteravatarNotIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "twitteravatar", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByTwitteravatar(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "twitteravatar "+order)
	return qb
}

func (qb *userQueryBuilder) WhereTwittername(p mysql.Predicate, value string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "twittername", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereTwitternameIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "twittername", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereTwitternameNotIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "twittername", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByTwittername(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "twittername "+order)
	return qb
}

func (qb *userQueryBuilder) WhereLastlogin(p mysql.Predicate, value int64) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "lastlogin", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereLastloginIn(value []int64) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "lastlogin", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereLastloginNotIn(value []int64) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "lastlogin", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByLastlogin(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "lastlogin "+order)
	return qb
}

func (qb *userQueryBuilder) WhereRegistertime(p mysql.Predicate, value int64) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "registertime", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereRegistertimeIn(value []int64) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "registertime", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereRegistertimeNotIn(value []int64) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "registertime", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByRegistertime(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "registertime "+order)
	return qb
}

func (qb *userQueryBuilder) WhereEnableroom(p mysql.Predicate, value int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "enableroom", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereEnableroomIn(value []int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "enableroom", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereEnableroomNotIn(value []int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "enableroom", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByEnableroom(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "enableroom "+order)
	return qb
}

func (qb *userQueryBuilder) WhereHot(p mysql.Predicate, value int64) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "hot", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereHotIn(value []int64) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "hot", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereHotNotIn(value []int64) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "hot", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByHot(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "hot "+order)
	return qb
}
