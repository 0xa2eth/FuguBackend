///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package secret_images

import (
	"fmt"

	"FuguBackend/app/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *SecretImages {
	return new(SecretImages)
}

func NewQueryBuilder() *secretImagesQueryBuilder {
	return new(secretImagesQueryBuilder)
}

func (t *SecretImages) Create(db *gorm.DB) (id int64, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type secretImagesQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *secretImagesQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *secretImagesQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&SecretImages{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *secretImagesQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&SecretImages{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *secretImagesQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&SecretImages{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *secretImagesQueryBuilder) First(db *gorm.DB) (*SecretImages, error) {
	ret := &SecretImages{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *secretImagesQueryBuilder) QueryOne(db *gorm.DB) (*SecretImages, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *secretImagesQueryBuilder) QueryAll(db *gorm.DB) ([]*SecretImages, error) {
	var ret []*SecretImages
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *secretImagesQueryBuilder) Limit(limit int) *secretImagesQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *secretImagesQueryBuilder) Offset(offset int) *secretImagesQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *secretImagesQueryBuilder) WhereId(p mysql.Predicate, value int64) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) WhereIdIn(value []int64) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) WhereIdNotIn(value []int64) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) OrderById(asc bool) *secretImagesQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *secretImagesQueryBuilder) WhereCreatedAt(p mysql.Predicate, value time.Time) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) WhereCreatedAtIn(value []time.Time) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) OrderByCreatedAt(asc bool) *secretImagesQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *secretImagesQueryBuilder) WhereUpdatedAt(p mysql.Predicate, value time.Time) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) WhereUpdatedAtIn(value []time.Time) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) OrderByUpdatedAt(asc bool) *secretImagesQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}

func (qb *secretImagesQueryBuilder) WhereDeletedAt(p mysql.Predicate, value time.Time) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", p),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) WhereDeletedAtIn(value []time.Time) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", "IN"),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) WhereDeletedAtNotIn(value []time.Time) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) OrderByDeletedAt(asc bool) *secretImagesQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "deleted_at "+order)
	return qb
}

func (qb *secretImagesQueryBuilder) WhereSecretId(p mysql.Predicate, value int64) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "secret_id", p),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) WhereSecretIdIn(value []int64) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "secret_id", "IN"),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) WhereSecretIdNotIn(value []int64) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "secret_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) OrderBySecretId(asc bool) *secretImagesQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "secret_id "+order)
	return qb
}

func (qb *secretImagesQueryBuilder) WhereImageUrl(p mysql.Predicate, value string) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "image_url", p),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) WhereImageUrlIn(value []string) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "image_url", "IN"),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) WhereImageUrlNotIn(value []string) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "image_url", "NOT IN"),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) OrderByImageUrl(asc bool) *secretImagesQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "image_url "+order)
	return qb
}

func (qb *secretImagesQueryBuilder) WhereSecretid(p mysql.Predicate, value int64) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "secretid", p),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) WhereSecretidIn(value []int64) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "secretid", "IN"),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) WhereSecretidNotIn(value []int64) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "secretid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) OrderBySecretid(asc bool) *secretImagesQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "secretid "+order)
	return qb
}

func (qb *secretImagesQueryBuilder) WhereImageurl(p mysql.Predicate, value string) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "imageurl", p),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) WhereImageurlIn(value []string) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "imageurl", "IN"),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) WhereImageurlNotIn(value []string) *secretImagesQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "imageurl", "NOT IN"),
		value,
	})
	return qb
}

func (qb *secretImagesQueryBuilder) OrderByImageurl(asc bool) *secretImagesQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "imageurl "+order)
	return qb
}
