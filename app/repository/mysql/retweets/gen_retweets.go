///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package retweets

import (
	"fmt"

	"FuguBackend/app/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *Retweets {
	return new(Retweets)
}

func NewQueryBuilder() *retweetsQueryBuilder {
	return new(retweetsQueryBuilder)
}

func (t *Retweets) Create(db *gorm.DB) (id int64, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type retweetsQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *retweetsQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *retweetsQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&Retweets{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *retweetsQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&Retweets{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *retweetsQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&Retweets{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *retweetsQueryBuilder) First(db *gorm.DB) (*Retweets, error) {
	ret := &Retweets{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *retweetsQueryBuilder) QueryOne(db *gorm.DB) (*Retweets, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *retweetsQueryBuilder) QueryAll(db *gorm.DB) ([]*Retweets, error) {
	var ret []*Retweets
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *retweetsQueryBuilder) Limit(limit int) *retweetsQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *retweetsQueryBuilder) Offset(offset int) *retweetsQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *retweetsQueryBuilder) WhereId(p mysql.Predicate, value int64) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) WhereIdIn(value []int64) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) WhereIdNotIn(value []int64) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) OrderById(asc bool) *retweetsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *retweetsQueryBuilder) WhereCreatedAt(p mysql.Predicate, value time.Time) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) WhereCreatedAtIn(value []time.Time) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) OrderByCreatedAt(asc bool) *retweetsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *retweetsQueryBuilder) WhereUpdatedAt(p mysql.Predicate, value time.Time) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) WhereUpdatedAtIn(value []time.Time) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) OrderByUpdatedAt(asc bool) *retweetsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}

func (qb *retweetsQueryBuilder) WhereDeletedAt(p mysql.Predicate, value time.Time) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", p),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) WhereDeletedAtIn(value []time.Time) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", "IN"),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) WhereDeletedAtNotIn(value []time.Time) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) OrderByDeletedAt(asc bool) *retweetsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "deleted_at "+order)
	return qb
}

func (qb *retweetsQueryBuilder) WhereCaveId(p mysql.Predicate, value string) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "cave_id", p),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) WhereCaveIdIn(value []string) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "cave_id", "IN"),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) WhereCaveIdNotIn(value []string) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "cave_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) OrderByCaveId(asc bool) *retweetsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "cave_id "+order)
	return qb
}

func (qb *retweetsQueryBuilder) WhereCaveReTweetUrl(p mysql.Predicate, value string) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "cave_re_tweet_url", p),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) WhereCaveReTweetUrlIn(value []string) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "cave_re_tweet_url", "IN"),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) WhereCaveReTweetUrlNotIn(value []string) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "cave_re_tweet_url", "NOT IN"),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) OrderByCaveReTweetUrl(asc bool) *retweetsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "cave_re_tweet_url "+order)
	return qb
}

func (qb *retweetsQueryBuilder) WhereCaveid(p mysql.Predicate, value string) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "caveid", p),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) WhereCaveidIn(value []string) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "caveid", "IN"),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) WhereCaveidNotIn(value []string) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "caveid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) OrderByCaveid(asc bool) *retweetsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "caveid "+order)
	return qb
}

func (qb *retweetsQueryBuilder) WhereCaveretweeturl(p mysql.Predicate, value string) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "caveretweeturl", p),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) WhereCaveretweeturlIn(value []string) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "caveretweeturl", "IN"),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) WhereCaveretweeturlNotIn(value []string) *retweetsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "caveretweeturl", "NOT IN"),
		value,
	})
	return qb
}

func (qb *retweetsQueryBuilder) OrderByCaveretweeturl(asc bool) *retweetsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "caveretweeturl "+order)
	return qb
}
